#!/bin/bash
#
# Author: Pierre Visconti
# Lightfetch: a lightweight command-line fetcher to display system stats
# 
# Some pieces of code were taken from the following projects (definitely check them out):
# Fetch: https://github.com/Manas140/fetch
# Neofetch: https://github.com/dylanaraps/neofetch
#
#
# Default config file, named "lightfetch" is located in /usr/locale/bin
# To run a modified file, copy the default one and place the copy in ~/.config/lightfetch
# 	Then pass the filename as an argument:
#	Ex: lightfetch -c mytheme
# Typing lightfetch without passing an argument will run the default config 
#	Ex: lightfetch

set -euo pipefail


function main {	
	### Possible colors have been defined below
	# prefixes:
	# l: light variant
	# d: dark variant
	# b: bolded
	local default="\e[0;39m"
	local black="\e[0;30m"
	local red="\e[0;31m"
	local green="\e[0;32m"
	local yellow="\e[0;33m"
	local blue="\e[0;34m"
	local purple="\e[0;35m"
	local cyan="\e[0;36m"
	local l_gray="\e[0;37m"
	local d_gray="\e[0;90m"
	local l_red="\e[0;91m"
	local l_green="\e[0;92m"
	local l_yellow="\e[0;93m"
	local l_blue="\e[0;94m"
	local l_purple="\e[0;95m"
	local l_cyan="\e[0;96m"
	local white="\e[0;97m"
	local b_default="\e[1;39m"
	local b_black="\e[1;30m"
	local b_red="\e[1;31m"
	local b_green="\e[1;32m"
	local b_yellow="\e[1;33m"
	local b_blue="\e[1;34m"
	local b_purple="\e[1;35m"
	local b_cyan="\e[1;36m"
	local bl_gray="\e[1;37m"
	local bd_gray="\e[1;90m"
	local bl_red="\e[1;91m"
	local bl_green="\e[1;92m"
	local bl_yellow="\e[1;93m"
	local bl_blue="\e[1;94m"
	local bl_purple="\e[1;95m"
	local bl_cyan="\e[1;96m"
	local b_white="\e[1;97m"

	
	### Configurable variables have been defined below
	# Distro name settings
	os_name_full="TRUE" # set to "TRUE" if you wish to display the full name
	# Shell settings
	shell_full="TRUE" # set to "TRUE" if you wish to display the full path
	# Memory settings:
	memory_units_type="M" # Set to "M" for MiB, set to "G" for GiB
	memory_disp_units="TRUE" # set to "TRUE" if you wish to display the units
	# CPU settings
	cpu_brand="TRUE" # set to TRUE if you wish to display CPU brand name


	### Display variables have been defined below
	# User and hostname
	local title=$(Title)
	# distro name
	local os_name=$(OS_Name)
	# kernel version
	local kernel=$(Kernel)
	# Desktop environment / window manager
	local de_wm=$(Desktop)
	# system shell 
	local shell=$(Shell)
	# system uptime
	local uptime=$(Uptime)
	# system uptime but saved as seperate variables for each unit of time (must be used together)
	local uptime_d=$(Uptime_D) # days
	local uptime_h=$(Uptime_H) # hours
	local uptime_m=$(Uptime_M) # minutes
	# Used and available memory  
	local memory=$(Memory)
	# cpu model name
	local cpu_model=$(CPU_Model)
	 


	########### OUTPUT: MODIFY THE FOLLOWING SECTION ###############
	echo ""
	echo -e "   ${default}-----------------------------------------"
	printf "        ${b_blue}${title}\n\n"
	printf "        ${b_blue}OS      ${default}: ${os_name}\n"
	printf "        ${b_blue}Kernel  ${default}: ${kernel}\n"		
	printf "        ${b_blue}DE/WM   ${default}: ${de_wm}\n"
	printf "        ${b_blue}Shell   ${default}: ${shell}\n"
	printf "        ${b_blue}Uptime  ${default}: ${uptime_d} days, ${uptime_h} hours, ${uptime_m} mins\n"
	printf "        ${b_blue}Memory  ${default}: ${memory}\n"
	printf "        ${b_blue}CPU     ${default}: ${cpu_model}\n"
	echo -e "   ${default}-----------------------------------------"
	echo ""
	##################### END OF OUTPUT ############################
}

function Title {
	local hostname=$(cat /etc/hostname)
	printf "${USER}@${hostname}"
}

function OS_Name {
	if [ "${os_name_full}" == "TRUE" ]; then
		local os_name=$(cat /etc/os-release | grep "\<PRETTY_NAME\>")
		if [ "${os_name}" ]; then
			os_name="${os_name%\"*}"
			os_name="${os_name#*\"}"
			printf "${os_name}"
		fi
	else 
		local os_name=$(cat /etc/os-release | grep "\<NAME\>")
		os_name="${os_name%\"*}"
		os_name="${os_name#*\"}"
		printf "${os_name}"
	fi
}

function Kernel {
	local kern=
	read -r _ _ kern _ < /proc/version
	printf "%s" "$kern"
}

function Desktop {
  if [ "$DESKTOP_SESSION" != "" ]; then
    printf "%s\n" "$DESKTOP_SESSION"
  elif [ "$XDG_CURRENT_DESKTOP" != "" ]; then
    printf "%s\n" "$XDG_CURRENT_DESKTOP"
  else
    for i in /proc/*/comm; do
      read -r p < "$i"
      case "$p" in
        awesome|xmonad*|qtile|sway|i3|[bfo]*box|*wm*) printf "%s" "${p%%-*}"; break;;
      esac
    done
  fi
}

function Shell {
	if [ "${shell_full}" == "TRUE" ]; then
		printf "${SHELL}"
	else
		printf "${SHELL##*/}"
	fi
}

function Uptime {
	local up=
	IFS=. read -r up _ < /proc/uptime
	local day=$((up / 60 / 60 / 24))
	local hr=$((up / 60 / 60 % 24))
	local min=$((up / 60 % 60))
	printf "%dd %dh %dm" "${day}" "${hr}" "${min}"
}

function Uptime_D {
	local up=
	IFS=. read -r up _ < /proc/uptime
	local day=$((up / 60 / 60 / 24))
	printf "${day}"
}

function Uptime_H {
	local up=
	IFS=. read -r up _ < /proc/uptime
	local hr=$((up / 60 / 60 % 24))
	printf "${hr}"
}

function Uptime_M {
	local up=
	IFS=. read -r up _ < /proc/uptime
	local min=$((up / 60 % 60))
	printf "${min}"
}

function Memory {
	local mem_used=
	local mem_total=
	local a=
	local b=
	while IFS=":" read -r a b; do
	case $a in
        	"MemTotal") ((mem_used+=${b/kB})); mem_total="${b/kB}" ;;
        	"Shmem") ((mem_used+=${b/kB}))  ;;
        	"MemFree" | "Buffers" | "Cached" | "SReclaimable")
        	mem_used="$((mem_used-=${b/kB}))"
        	;;
    	esac
  	done < /proc/meminfo
  	
	mem_used="$(( mem_used / 1024 ))"
  	mem_total="$(( mem_total / 1024 ))"
	
	if [ "${memory_units_type}" == "M" ]; then
		if [ "${memory_disp_units}" == "TRUE" ]; then
			printf "${mem_used}MiB / ${mem_total}MiB"
		else 
			printf "${mem_used} / ${mem_total}"
		fi
	elif [ "${memory_units_type}" == "G" ]; then
		if [ "${memory_disp_units}" == "TRUE" ]; then
			printf "${mem_used}GiB / ${mem_total}GiB"
		else 
			printf "${mem_used} / ${mem_total}"
		fi
	fi
}

function CPU_Model {
	cpu=$(cat /proc/cpuinfo | grep -m 1 "model name")
	cpu="${cpu%\@*}"
	cpu="${cpu#*\:}"
	# Remove un-needed patterns from cpu output.
    cpu="${cpu//(TM)}"
    cpu="${cpu//(tm)}"
    cpu="${cpu//(R)}"
    cpu="${cpu//(r)}"
    cpu="${cpu//CPU}"
    cpu="${cpu//Processor}"
    cpu="${cpu//Dual-Core}"
    cpu="${cpu//Quad-Core}"
    cpu="${cpu//Six-Core}"
    cpu="${cpu//Eight-Core}"
    cpu="${cpu//[1-9][0-9]-Core}"
    cpu="${cpu//[0-9]-Core}"
    cpu="${cpu//, * Compute Cores}"
    cpu="${cpu//Core / }"
    cpu="${cpu//(\"AuthenticAMD\"*)}"
    cpu="${cpu//with Radeon * Graphics}"
    cpu="${cpu//, altivec supported}"
    cpu="${cpu//FPU*}"
    cpu="${cpu//Chip Revision*}"
    cpu="${cpu//Technologies, Inc}"
    cpu="${cpu//Core2/Core 2}"
	shopt -s extglob
	cpu="${cpu##+([[:space:]])}"
	cpu="${cpu%%+([[:space:]])}"
	cpu_n="${cpu#*\ }"		
	cpu_n="${cpu_n##+([[:space:]])}"
	cpu_b=$(echo $cpu)
    if [ "$cpu_brand" == "TRUE" ]; then
		printf "${cpu_b}"
	else
		printf "${cpu_n}"
    fi
}

function Help { 
	printf "\n Usage: lightfetch [ -c file_name | -h ]
	-c: provide a filename in ~/.config/lightfetch  
	-h: help
	: default configuration \n\n"
}

### Runs lightfetch based on user input
set +u
if [ "${1}" ]; then
	case "${1}" in
  		*-c*) 
			if [ "$2" ]; then
				if [ -f "${HOME}"/.config/lightfetch/"${2}" ]; then
		 			"${HOME}"/.config/lightfetch/"${2}" 
				fi
			fi;;
  		*-h*) Help;;
	esac
else 
	main "$@"
fi

